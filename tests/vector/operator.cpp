#include "operator.hpp"

void    equal_vector()
{
    std::cout << "Operator VECTOR" << std::endl;
    NAMESPACE::vector<std::string>    vec_1;
    NAMESPACE::vector<std::string>    vec_2;
    NAMESPACE::vector<std::string>    vec_3;
    NAMESPACE::vector<std::string>    vec_4;

    vec_1.push_back("one");
    vec_1.push_back("two");
    vec_1.push_back("three");
    vec_2.push_back("four");
    vec_2.push_back("five");
    vec_3.push_back("one");
    vec_3.push_back("two");
    vec_3.push_back("three");
    vec_4.push_back("four");
    vec_4.push_back("five");
    vec_4.push_back("six");
    std::cout << "==" << std::endl;
    std::cout << (vec_1[0] == vec_2[1]) << std::endl;
    std::cout << (vec_2[1] == vec_1[0]) << std::endl;
    std::cout << (vec_1[0] == vec_3[2]) << std::endl;
    std::cout << (vec_1[0] == vec_4[0]) << std::endl;
    std::cout << "!=" << std::endl;
    std::cout << (vec_1[0] != vec_2[1]) << std::endl;
    std::cout << (vec_2[1] != vec_1[0]) << std::endl;
    std::cout << (vec_1[0] != vec_3[2]) << std::endl;
    std::cout << (vec_1[0] != vec_4[0]) << std::endl;
    std::cout << "<" << std::endl;
    std::cout << (vec_1[0] < vec_2[1]) << std::endl;
    std::cout << (vec_1[0] < vec_3[2]) << std::endl;
    std::cout << (vec_2[1] < vec_1[0]) << std::endl;
    std::cout << (vec_1[0] < vec_4[0]) << std::endl;
    std::cout << (vec_4[0] < vec_1[0]) << std::endl;
    std::cout << "<=" << std::endl;
    std::cout << (vec_1[0] <= vec_2[1]) << std::endl;
    std::cout << (vec_1[0] <= vec_3[2]) << std::endl;
    std::cout << (vec_2[1] <= vec_1[0]) << std::endl;
    std::cout << (vec_4[0] <= vec_1[0]) << std::endl;
    std::cout << (vec_1[0] <= vec_4[0]) << std::endl;
    std::cout << ">" << std::endl;
    std::cout << (vec_1[0] > vec_2[1]) << std::endl;
    std::cout << (vec_1[0] > vec_3[2]) << std::endl;
    std::cout << (vec_2[1] > vec_1[0]) << std::endl;
    std::cout << (vec_4[0] > vec_1[0]) << std::endl;
    std::cout << (vec_1[0] > vec_4[0]) << std::endl;
    std::cout << ">=" << std::endl;
    std::cout << (vec_1[0] >= vec_2[1])<< std::endl;
    std::cout << (vec_1[0] >= vec_3[2])<< std::endl;
    std::cout << (vec_2[1] >= vec_1[0])<< std::endl;
    std::cout << (vec_4[0] >= vec_1[0])<< std::endl;
    std::cout << (vec_1[0] >= vec_4[0])<< std::endl;
    std::cout << "<=" << std::endl;
    std::cout << (vec_1[0] <= vec_2[1]) << std::endl;
    std::cout << (vec_1[0] <= vec_3[2]) << std::endl;
    std::cout << (vec_2[1] <= vec_1[0]) << std::endl;
    std::cout << (vec_4[0] <= vec_1[0]) << std::endl;
    std::cout << (vec_1[0] <= vec_4[0]) << std::endl;
    std::cout << ">=" << std::endl;
    std::cout << (vec_1[0] >= vec_2[1])<< std::endl;
    std::cout << (vec_1[0] >= vec_3[2])<< std::endl;
    std::cout << (vec_2[1] >= vec_1[0])<< std::endl;
    std::cout << (vec_4[0] >= vec_1[0])<< std::endl;
    std::cout << (vec_1[0] >= vec_4[0])<< std::endl;
}

void    non_member_operator_vector()
{
    std::cout << "Non Member Operator VECTOR" << std::endl;
    NAMESPACE::vector<int>    vec_1;
    NAMESPACE::vector<int>    vec_2;
    NAMESPACE::vector<int>    vec_3;
    NAMESPACE::vector<int>    vec_4;

    vec_1.push_back(1);
    vec_1.push_back(2);
    vec_1.push_back(3);
    vec_2.push_back(4);
    vec_2.push_back(5);
    vec_3.push_back(1);
    vec_3.push_back(2);
    vec_3.push_back(3);
    vec_4.push_back(4);
    vec_4.push_back(5);
    vec_4.push_back(3);
    std::cout << "==" << std::endl;
    std::cout << (vec_1 == vec_2) << std::endl;
    std::cout << (vec_2 == vec_1) << std::endl;
    std::cout << (vec_1 == vec_3) << std::endl;
    std::cout << (vec_1 == vec_4) << std::endl;
    std::cout << "!=" << std::endl;
    std::cout << (vec_1 != vec_2) << std::endl;
    std::cout << (vec_2 != vec_1) << std::endl;
    std::cout << (vec_1 != vec_3) << std::endl;
    std::cout << (vec_1 != vec_4) << std::endl;
    std::cout << "<" << std::endl;
    std::cout << (vec_1 < vec_2) << std::endl;
    std::cout << (vec_1 < vec_3) << std::endl;
    std::cout << (vec_2 < vec_1) << std::endl;
    std::cout << (vec_1 < vec_4) << std::endl;
    std::cout << (vec_4 < vec_1) << std::endl;
    std::cout << "<=" << std::endl;
    std::cout << (vec_1 <= vec_2) << std::endl;
    std::cout << (vec_1 <= vec_3) << std::endl;
    std::cout << (vec_2 <= vec_1) << std::endl;
    std::cout << (vec_4 <= vec_1) << std::endl;
    std::cout << (vec_1 <= vec_4) << std::endl;
    std::cout << ">" << std::endl;
    std::cout << (vec_1 > vec_2) << std::endl;
    std::cout << (vec_1 > vec_3) << std::endl;
    std::cout << (vec_2 > vec_1) << std::endl;
    std::cout << (vec_4 > vec_1) << std::endl;
    std::cout << (vec_1 > vec_4) << std::endl;
    std::cout << ">=" << std::endl;
    std::cout << (vec_1 >= vec_2)<< std::endl;
    std::cout << (vec_1 >= vec_3)<< std::endl;
    std::cout << (vec_2 >= vec_1)<< std::endl;
    std::cout << (vec_4 >= vec_1)<< std::endl;
    std::cout << (vec_1 >= vec_4)<< std::endl;
    vec_1.resize(100000);
     std::cout << "<=" << std::endl;
    std::cout << (vec_1 <= vec_2) << std::endl;
    std::cout << (vec_1 <= vec_3) << std::endl;
    std::cout << (vec_2 <= vec_1) << std::endl;
    std::cout << (vec_4 <= vec_1) << std::endl;
    std::cout << (vec_1 <= vec_4) << std::endl;
    std::cout << ">=" << std::endl;
    std::cout << (vec_1 >= vec_2)<< std::endl;
    std::cout << (vec_1 >= vec_3)<< std::endl;
    std::cout << (vec_2 >= vec_1)<< std::endl;
    std::cout << (vec_4 >= vec_1)<< std::endl;
    std::cout << (vec_1 >= vec_4)<< std::endl;
}