Std::allocator


Allocateur :
https://fr.wikipedia.org/wiki/Allocateur_(C%2B%2B)
Un allocateur est un composant de la bibliothèque standard de C++ (Standard Template Library ou STL) qui gère les demandes d'allocation et de désallocation de la mémoire.

https://en.cppreference.com/w/cpp/named_req/Allocator
Encapsulates strategies for access/addressing, allocation/deallocation and construction/destruction of objects.

Every standard library component that may need to allocate or release storage, from std::string, std::vector, and every container except std::array, to std::shared_ptr and std::function, does so through an Allocator: an object of a class type that satisfies the following requirements.

https://en.cppreference.com/w/cpp/memory/allocator
std::allocator:
The std::allocator class template is the default Allocator used by all standard library containers if no user-specified allocator is provided. The default allocator is stateless, that is, all instances of the given allocator are interchangeable, compare equal and can deallocate memory allocated by any other instance of the same allocator type. 

https://www.geeksforgeeks.org/stdallocator-in-cpp-with-examples/
Allocators are objects responsible for encapsulating memory management.
std::allocator is used when you want to separate allocation and do construction in two steps.
It is also used when separate destruction and deallocation is done in two steps.

std::allocator est un template, initialisable comme ca :
	std::allocator<T> alloc;
Lire les fonctions membres.
Utiliser allocate() et deallocate();
int* p = alloc.allocate(1);  // space for one int
alloc.deallocate(p, 1);      // and it is gone
